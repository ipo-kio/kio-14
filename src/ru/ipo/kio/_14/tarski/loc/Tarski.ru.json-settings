{
    "title0": "Дом, который построил Джек", /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
    "statement0": <<<
<p>Джек Логик построил дом и пригласил друзей поселиться в нем, но поставил им жесткие условия на размещение.</p>
<p>Поселите в дом как можно больше жителей,
так чтобы</p>
<p><b>1) были удовлетворены как можно больше условий из тех, которые поставил Джек.</b></p>
<p><b>2) Из двух решений с одинаковым числом выполненных условий лучшим считается решение с большим числом жителей.</b></p>
<p><b>Лучшее решение сохраняется автоматически!</b></p>
    >>>,
    "help0": <<<

<p>Фигурки жителей перемещаются мышкой в выбранные квартиры (или из квартир в «корзину»).
Программа анализирует размещение жителей и помечает выполненные условия птичками, а невыполненные — крестиками.
</p><p>
Лучшие решения сохраняются автоматически и загружаются кнопкой «загрузить рекорд». Также кнопками «сохранить решение» и
«загрузить решение» можно сохранять и извлекать любые решения.</p>
    >>>,

    "title1": "Мир Тарского", /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
    "statement1": <<<
<p>В предложенной задаче нужно написать логические условия, которым удовлетворяют размещения жителей в домах поселка Смайлики,
но не удовлетворяет размещения жителей в домах поселка Грустики.</p>
<p><b>1) Чем больше домов первого поселка и чем меньше домов второго будут удовлетворять вашему условию, тем лучше
(нужно увеливать сумму выделенных домов первого поселка и невыделенных - второго).</b></p>
<p><b>2) Если условие правильно отделяет дома первого поселка от домов второго, то лучшим
считается решение с более коротким условием.</b></p>
<p></p>
<p>Как описыаются условия? Для этого нужно использовать свойства объктов (куб, шар, красный-синий, большой-малый),
отношения между обектами («рядом с», «выше», «левее» и логические связки (И, ИЛИ, ЕСЛИ ТО, ТОГДА И ТОЛЬКО ТОГДА).
Скобки помогут уточнить последовательность операций.</p>
<p>Например, если записаны три условия:</p>
<p><b>1) (X красный И X шар) ИЛИ X куб</b></p>
<p><b>2) X большой => X куб</b></p>
<p><b>3) X рядом с Y <=> X синий И Y красный</b></p>

<p>то будут выделены только те домики, в которых для всех его жителей верно, что в них живут
только красные шары и/или кубы (1 условие), нет больших шаров (2 условие), и рядом не могут жить жители
одного цвета (3 условие).</p>
<p></p><p></p>
<p>Сюжет сделан по мотивам программного продукта, созданного для обучения логике и названного в честь известного математика
Альфреда Тарского (на рисунке сверху), основателя формальной теории истинности. Замечательным результатом
этого учёного является алгоритм Тарского, который, в частности, даёт способ автоматического доказательства
всех теорем «элементарной» геометрии через введенный Рене Декартом «метод координат».</p>
<p>Об алгоритме Тарского можно узнать, прослушав популярную лекцию известного Санкт-Петербургского
ученого Юрия Владимировича Матиясевича (на рисунке снизу) - заведующего лабораторией математической логики Санкт-Петербургского
отделения Математического института им. В.А.Стеклова РАН, который внес существенный вклад в теорию вычислимости,
завершив решение десятой проблемы Гильберта.
<a href=\"http://www.lektorium.tv/course/?id=22752\">http://www.lektorium.tv/course/?id=22752</a>
>>>,
    "help1":<<<
<p>Набор условий осуществляется с помощью клавиатуры в естественном порядке слева направо.
Скобки можно поставить в уже набранное выражение, установив курсор в нужное место мышкой.
При правильном наборе условия (даже частичном) слева от него появляется птичка и все заданные
расположения жителей в домах оцениваются (домики, удовлетворяющие условиям, выделяются).
При неправильном наборе условия (например, на рисунке в логическом выражении отсутствует логическая связка «И»)
около условия появляется крестик и оно не учитывается.</p>

<p>Изменения условия в строке происходят обратным стиранием введенных слов (кнопка «стереть») и набром новых.
Добавление нового условия (строки) осуществляется кнопкой «создать», а удаление условия — кнопкой «удалить».
</p>
<p>Лучшие решения сохраняются автоматически и загружаются кнопкой «загрузить рекорд». Также кнопками «сохранить
решение» и «загрузить решение» можно сохранять и извлекать любые решения.</p>
    >>>,

"title2": "Мир Тарского", /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
"statement2": <<<
<p>В предложенной задаче нужно написать логические условия, которым удовлетворяют размещения жителей в домах поселка Смайлики,
но не удовлетворяет размещения жителей в домах поселка Грустики.</p>
<p><b>1) Чем больше домов первого поселка и чем меньше домов второго будут удовлетворять вашему условию, тем лучше
(нужно увеливать сумму выделенных домов первого поселка и невыделенных - второго).</b></p>
<p><b>2) Если условие правильно отделяет дома первого поселка от домов второго, то лучшим
считается решение с более коротким условием.</b></p>
<p></p>
<p>Как описыаются условия? Для этого нужно использовать свойства объктов (куб, шар, красный-синий, большой-малый),
отношения между обектами («рядом с», «выше», «левее» и логические связки (И, ИЛИ, ЕСЛИ ТО, ТОГДА И ТОЛЬКО ТОГДА).
Скобки помогут уточнить последовательность операций.</p>
<p>Например, если записаны три условия:</p>
<p><b>1) (X красный И X шар) ИЛИ X куб</b></p>
<p><b>2) X большой => X куб</b></p>
<p><b>3) X рядом с Y <=> X синий И Y красный</b></p>

<p>то будут выделены только те домики, в которых для всех его жителей верно, что в них живут
только красные шары и/или кубы (1 условие), нет больших шаров (2 условие), и рядом не могут жить жители
одного цвета (3 условие).</p>
<p></p><p></p>
<p>Сюжет сделан по мотивам программного продукта, созданного для обучения логике и названного в честь известного математика
Альфреда Тарского (на рисунке сверху), основателя формальной теории истинности. Замечательным результатом
этого учёного является алгоритм Тарского, который, в частности, даёт способ автоматического доказательства
всех теорем «элементарной» геометрии через введенный Рене Декартом «метод координат».</p>
<p>Об алгоритме Тарского можно узнать, прослушав популярную лекцию известного Санкт-Петербургского
ученого Юрия Владимировича Матиясевича (на рисунке снизу) - заведующего лабораторией математической логики Санкт-Петербургского
отделения Математического института им. В.А.Стеклова РАН, который внес существенный вклад в теорию вычислимости,
завершив решение десятой проблемы Гильберта.
<a href=\"http://www.lektorium.tv/course/?id=22752\">http://www.lektorium.tv/course/?id=22752</a>
>>>,
"help2":<<<
<p>Набор условий осуществляется с помощью клавиатуры в естественном порядке слева направо.
Скобки можно поставить в уже набранное выражение, установив курсор в нужное место мышкой.
При правильном наборе условия (даже частичном) слева от него появляется птичка и все заданные
расположения жителей в домах оцениваются (домики, удовлетворяющие условиям, выделяются).
При неправильном наборе условия (например, на рисунке в логическом выражении отсутствует логическая связка «И»)
около условия появляется крестик и оно не учитывается.</p>

<p>Изменения условия в строке происходят обратным стиранием введенных слов (кнопка «стереть») и набром новых.
Добавление нового условия (строки) осуществляется кнопкой «создать», а удаление условия — кнопкой «удалить».
</p>
<p>Лучшие решения сохраняются автоматически и загружаются кнопкой «загрузить рекорд». Также кнопками «сохранить
решение» и «загрузить решение» можно сохранять и извлекать любые решения.</p>
>>>,

	"buttons":{
    		"reset": "В начало",
    		"step": "Шаг",
    		"add": "Добавить\nшестеренку",
            "delete": "Удалить\nшестеренку",
    		"play": "Анимация",
    		"stop": "Остановить",
    		"show": "Показать\nизделие",
    		"hide": "Скрыть\nизделие"
    	},

    	"headers":{
            		"cogSize": "зуб",
            		"maxDiv": " макс. отношение",
            		"crossZone": "зона",
            		"square": "Размер корпуса",
            		"transmission": "Погрешность",
            		"rotate": "Вращение",
            		"slow": "медленное",
            		"fast": "быстрое",
            		"very_slow": "очень медленное",
            		"very_fast": "очень быстрое",
            		"middle": "среднее",
            		"edit": "Редактор",
            		"result": "Результат",
            		"best": "Рекорд",
            		"crash": "Поломка",
            		"mm": "кв. мм",
            		"cm": "кв. см",
            		"dm": "кв. дм",
            		"m": "кв. м"
           	}   ,

           	"messages":{
           	"delete_empty": "Необходимо выделить шестеренку!",
           	"delete_arrow": "Невозможно удалить стрелку!",
           	"play_crash": "В существующей конструкции есть шестеренки,\n наезжающие на оси других шестеренок!",
           	"tooSmall": "Количество зубьев не может быть меньше 8",
           	"tooBig": "Количество зубьев не может превышать 40",
           	"tooBigDiv": "Отношение количества зубьев верхней и нижней\n шестеренки не может превышать "
           	}
}